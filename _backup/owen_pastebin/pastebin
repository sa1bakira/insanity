===============================================================================
.htaccess
===============================================================================

RewriteEngine on

RewriteBase /

DirectorySlash off

RewriteOptions AllowNoSlash

# 404 files with suffixes
RewriteCond %{THE_REQUEST} \.(php|html|htm|txt) [NC]
RewriteRule .* - [R=404,NC,L]

# 404 directories with slashes
RewriteCond %{REQUEST_FILENAME} -d
RewriteCond %{REQUEST_URI} /.+/+$
RewriteRule .* - [R=404,NC,L]

# directories without slashes
RewriteCond %{REQUEST_FILENAME}/ -d
RewriteCond %{REQUEST_FILENAME}/index\.php -f
RewriteRule [^/]$ %{REQUEST_URI}/index.php [NC,L]

# pastebin
RewriteRule ^pastebin/plain/([0-9a-zA-Z]+)$ pastebin.php?plain=true&file_id=$1 [NC,L]
RewriteRule ^pastebin/([0-9a-zA-Z]+)$ pastebin.php?file_id=$1 [NC,L]

# php files without suffixes except index.php
RewriteCond %{REQUEST_FILENAME}.php -f
RewriteCond %{REQUEST_FILENAME}.php !.*/index\.php [NC]
RewriteRule ^(.*)$ $1.php [NC,L]

# allow php in html files
AddType application/x-httpd-php .html .htm

# html files without suffixes except index.html
RewriteCond %{REQUEST_FILENAME}.html -f
RewriteCond %{REQUEST_FILENAME}.html !.*/index\.html [NC]
RewriteRule ^(.*)$ $1.html [NC,L]


===============================================================================
inc_ini.php
===============================================================================

<?php
define('PASTEBIN_MAXLENGTH', 20000);
define('PASTEBIN_HOURS', 4);
define('PASTEBIN_MAXHOURS', 48);

// base 10
define('B10', '0123456789');
// B62 str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
define('B62', 'eKHjfxRlOLBn28JMyFoUmEqWDsVNGZiYvXhp60udc9Ia7St5rbgPQT1Ak3wzC4');
// new base from any base to any base
function nub($numberInput, $fromBaseInput = '', $toBaseInput = '') {
  if($fromBaseInput == '') {
    $fromBaseInput = B10;
  }
  if($toBaseInput == '') {
    $toBaseInput = B62;
  }
  if($fromBaseInput == $toBaseInput) {
    return $numberInput;
  }
  $fromBase = str_split($fromBaseInput, 1);
  $toBase = str_split($toBaseInput, 1);
  $number = str_split($numberInput, 1);
  $fromLen = strlen($fromBaseInput);
  $toLen = strlen($toBaseInput);
  $numberLen = strlen($numberInput);
  $retval = '';
  if($toBaseInput == B10) {
    $retval=0;
    for($i = 1; $i <= $numberLen; $i++) {
      $retval = bcadd($retval, bcmul(array_search($number[$i - 1], $fromBase), bcpow($fromLen, $numberLen - $i)));
    }
    return $retval;
  }
  if($fromBaseInput != B10) {
    $base10 = nub($numberInput, $fromBaseInput, B10);
  } else {
    $base10 = $numberInput;
  }
  if($base10<strlen($toBaseInput)) {
    return $toBase[$base10];
  }
  while($base10 != '0') {
    $retval = $toBase[bcmod($base10, $toLen)].$retval;
    $base10 = bcdiv($base10, $toLen, 0);
  }
  return $retval;
}

function filter(array &$array) {
  array_walk_recursive($array, function(&$value) {
    $value = filter_var(trim($value), FILTER_SANITIZE_STRING);
  });
  return $array;
}

// sanitize all $_POST vars
if(isset($_POST)) {
  if(isset($_POST['paste'])) {
    $raw_paste = $_POST['paste'];
  }
  $_POST = filter($_POST);
}

// sanitize all $_GET vars
if(isset($_GET)) {
  $_GET = filter($_GET);
}
?>


===============================================================================
pastebin.php
===============================================================================

<?php
require_once('inc_ini.php');
$textarea = '';
$htmllink = '';
$plainlink = '';
$notice = '';
$disabled = ' disabled';
if(isset($_GET['file_id'])) {
  if(isset($_GET['plain'])) {
    $file = '../base/pastebin/'.$_GET['file_id'];
    if(file_exists($file)) {
      header('Content-type: text/plain');
      $textarea = file_get_contents($file);
      print($textarea);
    } else {
      print('<h3>Sorry, that paste bin '.$_GET['file_id'].' does not exist.</h3>');
    }
    exit();
  } else {
    $file = '../base/pastebin/'.$_GET['file_id'];
    if(file_exists($file)) {
      $now = floor(microtime(true));
      $keep = floor(nub($_GET['file_id'], B62, B10) / 10000);
      $left = bcsub($keep, $now);
      $hrs = floor($left / 3600);
      $mins = floor(($left / 60) % 60);
      $notice = $_GET['file_id'].' has '.$hrs.':'.$mins.' time left';
      $textarea = file_get_contents($file);
      $htmllink = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['HTTP_HOST'].'/pastebin/'.$_GET['file_id'];
      $plainlink = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['HTTP_HOST'].'/pastebin/plain/'.$_GET['file_id'];
      $disabled = '';
    } else {
      header('location: /pastebin');
      exit();
    }
  }
}
?>
<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="oetec - Computer Products and Solutions">
    <meta name="author" content="oetec">

    <meta name="revised" content="<?php print(date('Y-m-d')); ?>">

    <title>Owen Eng Technologies - pastebin</title>
    
    <link rel="apple-touch-icon" sizes="180x180" href="/lib/oetec/images/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/lib/oetec/images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/lib/oetec/images/favicon-16x16.png">
    <link rel="manifest" href="/lib/oetec/images/site.webmanifest">
    <link rel="mask-icon" href="/lib/oetec/images/safari-pinned-tab.svg" color="#003366">
    <link rel="shortcut icon" href="/lib/oetec/images/favicon.ico">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-config" content="/lib/oetec/images/browserconfig.xml">
    <meta name="theme-color" content="#ffffff">

    <link rel="stylesheet" href="/vendor/bootstrap/css/bootstrap.min.css">

    <style>
div.numberedtextarea-wrapper {
  position: relative;
}

div.numberedtextarea-wrapper textarea {
  display: block;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

div.numberedtextarea-line-numbers {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 4.0rem;
  border-right: 1px solid rgba(0, 0, 0, 0.3);
  background-color: #e9ecef;
  overflow: hidden;
}

div.numberedtextarea-number {
  padding-right: 0.6rem;
  text-align: right;
  font-family: 'Lucida Console', 'Courier New', monospace;
  font-size: 0.8rem;
  color: rgba(0, 0, 0, 0.5);
}

#htmllink, #plainlink {
  font-family: 'Lucida Console', 'Courier New', monospace;
}

.paste {
  font-family: 'Lucida Console', 'Courier New', monospace;
}

.btn, .btn:focus, input, input:focus, textarea, textarea:focus, .custom-file-input, .custom-file-input:focus, .form-control, .form-control:focus {
  outline: none !important;
  box-shadow: none !important;
  text-decoration: none !important;
}
    </style>
  </head>

  <body>

    <div class="container-fluid my-3">

      <div class="row">
        <div class="col">
          <div class="row no-gutters align-items-end">
            <div class="col">
              <h4 class="m-0">Paste Bin</h4>
            </div>
            <div class="col-auto">
              <p class="text-right text-nowrap bg-light border-secondary rounded px-2 m-0" id="notice"><?php print($notice); ?></p>
            </div>
          </div>
        </div>
      </div>

      <div class="form-row mt-2">
        <div class="col-12 col-lg-6 mt-1">
          <div class="input-group input-group-sm">
            <div class="input-group-prepend">
              <span class="input-group-text" id="url">html</span>
            </div>
            <input id="htmllink" class="form-control" type="text" value="<?php print($htmllink); ?>" readonly>
          </div>
        </div>
        <div class="col-12 col-lg-6 mt-1">
          <div class="input-group input-group-sm">
            <div class="input-group-prepend">
              <a href="<?php print($plainlink); ?>" class="btn btn-outline-secondary plainlink<?php print($disabled); ?>">plain</a>
            </div>
            <input id="plainlink" class="form-control" type="text" value="<?php print($plainlink); ?>" readonly>
          </div>
        </div>
      </div>

      <form id="pastebin_form" class="needs-validation" novalidate>
        <input type="hidden" name="post" value="pastebin">
        <div class="row mt-3">
          <div class="col">
            <textarea class="form-control form-control-sm paste" name="paste" id="paste" rows="14" maxlength="<?php print(PASTEBIN_MAXLENGTH); ?>" autocomplete="off" autocapitalize="off" wrap="off" spellcheck="false" required><?php print(htmlentities($textarea)); ?></textarea>
          </div>
        </div>
        <div class="form-row mt-2">
          <div class="col-12 col-md mt-2">
              <div class="custom-file">
                <input type="file" class="custom-file-input" id="pastefile">
                <label class="custom-file-label" for="pastefile">Paste a file</label>
              </div>
          </div>
          <div class="col-auto mt-2">
            <a href="/pastebin" class="btn btn-outline-secondary">New</a>
          </div>
          <div class="col mt-2">
            <div class="input-group">
              <div class="input-group-prepend">
                <div class="input-group-text text-nowrap">Hours</div>
              </div>
              <input type="number" class="form-control" name="hours" id="hours" min="1" max="<?php print(PASTEBIN_MAXHOURS); ?>" step="1" value="<?php print(PASTEBIN_HOURS); ?>">
              <div class="input-group-append">
                <div class="input-group-text text-nowrap">Size:&nbsp;<span id="count"></span></div>
              </div>
              <div class="input-group-append">
                <button type="submit" class="btn btn-primary" id="pastebin_submit">Save</button>
              </div>
            </div>
          </div>
        </div>
      </form>
      
      <div class="row mt-5">
        <div class="col">
          <h4>Use curl</h4>
          <div class="alert alert-white border border-light small px-2 py-1 mt-1 mb-0">
            <span class="text-nowrap">curl -d "post=pastebin & plain=true & hours=4</span> <span class="text-nowrap">& paste=a quick line of text to share"</span> https://www.oetec.com/post
          </div>
          <div class="alert alert-white border border-light small px-2 py-1 mt-1 mb-0">
            <span class="text-nowrap">curl -d "post=pastebin & plain=true & hours=4"</span> <span class="text-nowrap">--data-urlencode "paste@/file/to/share"</span> https://www.oetec.com/post
          </div>
        </div>
      </div>
  
    </div>

    <!-- Modal -->
    <div class="modal fade bclose" id="modal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title" id="modal_title">&nbsp;</h4>
            <button type="button" class="close" data-dismiss="modal">
              <span>&times;</span>
            </button>
          </div>
          <div class="modal-body" id="modal_body"></div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Ready Modal -->
    <div class="modal" data-backdrop="false" id="ready_modal" tabindex="-1">
      <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content bg-transparent border-0">
          <div class="modal-body" id="ready_modal_body">
            <h1 class="text-center"><span class="badge badge-light rounded-circle border shadow p-4">Saved</span></h1>
          </div>
        </div>
      </div>
    </div>

    <script src="/vendor/jquery/jquery.min.js"></script>
    <script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <script>
<?php require_once('vendor/ta2/ta2.js'); ?>
$('body').on('submit', '#pastebin_form', function(e) {
  e.preventDefault();
  e.stopPropagation();
  if($('#pastebin_form')[0].checkValidity() === true) {
    // Get form
    var form = $('#pastebin_form')[0];
    // Create an FormData object 
    var form_data = new FormData(form);
    $('#pastebin_submit').prop('diabled', true);
    $.ajax({
      url: '/post',
      type: 'POST',
      contentType: false,
      processData: false,
      data: form_data,
      cache: false,
      dataType: 'json',
      success: function(response) {
        if(response.success) {
          $('#ready_modal').modal('show');
          $('#htmllink').val(response.success.html);
          $('#plainlink').val(response.success.plain);
          $('#notice').html(response.success.html.replace(/^.*\//, '') + ' has ' + $('#hours').val() + ':00 hr left');
          $('a.plainlink').attr('href', response.success.plain).removeClass('disabled');
          window.history.replaceState('', '', response.success.html);
        } else if(response.fail) {
          $('#modal').modal('hide');
          $('#modal_title').html('Oops');
          $('#modal_body').html(response.fail);
          $('#modal').modal('show');
        };
      },
      error: function() {
        $('#modal').modal('hide');
        $('#modal_title').html('Oops');
        $('#modal_body').html('Failed to connect to server. Please try again later!');
        $('#modal').modal('show').on('hidden.bs.modal', function() {
          window.location.reload(true);
        });
      },
      complete: function() {
        $('#pastebin_submit').prop('diabled', false);
      }
    });
  } else {
    $('#pastebin_form').addClass('was-validated');
  };
});

$('body').on('change', '#pastefile', function(ev) {
  var filename = $(this).val();
  $(this).next('.custom-file-label').html(filename);
  var file = ev.target.files[0];
  var reader = new FileReader();
  reader.onload = function(e) {
    var text = e.target.result;
    var maxlength = $('#paste').attr('maxlength');
    var newlength = text.length;
    $('#count').html(newlength);
    if(newlength > maxlength || newlength == 0) {
      $('#count').addClass('text-danger');
    } else {
      $('#count').removeClass('text-danger');
    };
    $('#paste').text(text).trigger('change');
    $('#htmllink').val('');
    $('#plainlink').val('');
    $('#notice').html('');
    $('a.plainlink').attr('href', '').addClass('disabled');
    window.history.pushState('', '', '/pastebin');
  };
  reader.readAsText(file);
});

$('body').on('input', '#paste', function() {
  var maxlength = $(this).attr('maxlength');
  var newlength = $(this).val().length;
  $('#count').html(newlength);
  if(newlength > maxlength || newlength == 0) {
    $('#count').addClass('text-danger');
  } else {
    $('#count').removeClass('text-danger');
  };
});

$('#paste').numberedtextarea();

// auto close modal
$('body').on('shown.bs.modal', '#ready_modal', function() {
  setTimeout(function() {
    $('#ready_modal').modal('hide');
  }, 300);
});

$(document).ready(function() {
  'use strict';
  window.addEventListener('load', function() {
    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.getElementsByClassName('needs-validation');
    // Loop over them and prevent submission
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if(form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }form.classList.add('was-validated');
      }, false);
    });
  }, false);

  var maxlength = $('#paste').attr('maxlength');
  var newlength = $('#paste').val().length;
  $('#count').html(newlength);
  if(newlength > maxlength || newlength == 0) {
    $('#count').addClass('text-danger');
  } else {
    $('#count').removeClass('text-danger');
  };
});
    </script>
  </body>
</html>


===============================================================================
pastebin_post.php
===============================================================================

<?php
require_once('inc_ini.php');

if(!isset($promise)) {
  $_SERVER['REDIRECT_STATUS'] = 404;
  require_once('error.php');
  exit();
}

if(!isset($raw_paste) || strlen($raw_paste) > PASTEBIN_MAXLENGTH) {
  // failed validation
  $response['fail'] = 'Paste Fail: Min=1 Max='.PASTEBIN_MAXLENGTH;
} else {
  if(isset($_POST['hours']) && is_numeric($_POST['hours']) && $_POST['hours'] >= 1 && $_POST['hours'] <= PASTEBIN_MAXHOURS) {
    $hours = $_POST['hours'];
  } else {
    $hours = PASTEBIN_HOURS;
  }
  // save the file
  $a = microtime(true);                   // 1234567890.1234
  $b = strtotime('+'.$hours.' hour', $a); // 1234577777
  $c = bcsub($b, $a);                     // 9887
  $d = bcadd($c, $a, 4);                  // 1234577777.1234
  $e = str_replace('.', '', $d);
  $file = nub($e);
  file_put_contents('../base/pastebin/'.$file, $raw_paste, LOCK_EX);
  $response['success']['html'] = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['HTTP_HOST'].'/pastebin/'.$file;
  $response['success']['plain'] = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['HTTP_HOST'].'/pastebin/plain/'.$file;
}

// return response
if(isset($_POST['plain'])) {
  if(isset($response['success'])) {
    print($response['success']['html'].PHP_EOL.$response['success']['plain'].PHP_EOL);
  } else {
    print($response['fail'].PHP_EOL);
  }
} else {
  print(json_encode($response));
}
?>


===============================================================================
post.php
===============================================================================

<?php
require_once('inc_ini.php');
// initialize
if($_SERVER['REQUEST_METHOD'] == 'POST') {
  if(isset($_POST['post']) && is_file($_POST['post'].'_post.php')) {
    $promise = true;
    require_once($_POST['post'].'_post.php');
  } else {
    $response['fail'] = 'Check your POST variables';
    print(json_encode($response));
  }
} else {
  $_SERVER['REDIRECT_STATUS'] = 404;
  require_once('error.php');
}
?>


===============================================================================
pastebin_cron.php
===============================================================================

<?php
if(php_sapi_name() != 'cli') {
  $_SERVER['REDIRECT_STATUS'] = 404;
  require_once('error.php');
  exit();
}
$base = '/export/apache/vhosts/www.oetec.com';
require_once($base.'/htdocs/inc_ini.php');
$pastebins = $base.'/base/pastebin/*';
$now = floor(microtime(true));
foreach(glob($pastebins) as $file) {
  $name = basename($file);
  $keep = floor(nub($name, B62, B10) / 10000);
  if($now > $keep) {
    unlink($file);
  }
}
?>
